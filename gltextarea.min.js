/*! 
  glTextarea v(0.0.6) 
  (c) 2013-2015
  https://gluenetworks.kilnhg.com/Code/Web-Development
  Release Date: 2015-03-03 
*/

angular.module("glTextarea", []), angular.module("glTextarea").directive("glTextarea", [ "$compile", function(a) {
    "use strict";
    return {
        restrict: "E",
        replace: !0,
        scope: {
            settings: "=",
            api: "="
        },
        link: function(b, c) {
            var d, e, f, g, h = "gl-empty", i = "gl-invalid", j = '<textarea class="gl-textarea-input" placeholder="{{api._data.placeholder}}" data-ng-model="api._data.value"></textarea>', k = '<p class="gl-textarea-error">{{api._data.error}}</p>', l = '<label class="gl-textarea-view-label">{{api._data.label}}</label>', m = '<p class="gl-textarea-view-value">{{api._data.value}}</p>';
            b.api = angular.isUndefined(b.api) ? {} : b.api, console.log("scope.api"), console.log(b.api), 
            b.api._data = {}, // MAP SETTINGS
            b.api._data.value = angular.isUndefined(b.settings.value) ? void 0 : b.settings.value, 
            b.api._data.cols = angular.isUndefined(b.settings.cols) ? void 0 : b.settings.cols, 
            b.api._data.rows = angular.isUndefined(b.settings.rows) ? void 0 : b.settings.rows, 
            b.api._data.valid = angular.isUndefined(b.settings.valid) ? !0 : b.settings.valid, 
            b.api._data.name = angular.isUndefined(b.settings.name) ? void 0 : b.settings.name, 
            b.api._data.label = angular.isUndefined(b.settings.label) ? void 0 : b.settings.label, 
            b.api._data.disabled = angular.isUndefined(b.settings.disabled) ? !1 : b.settings.disabled, 
            b.api._data.placeholder = angular.isUndefined(b.settings.placeholder) ? void 0 : b.settings.placeholder, 
            b.api._data.error = angular.isUndefined(b.settings.error) ? void 0 : b.settings.error, 
            b.api._data.editable = angular.isUndefined(b.settings.editable) ? !0 : b.settings.editable, 
            b.api._data.emitEvents = angular.isUndefined(b.settings.emitEvents) ? [ "focus", "blur", "change", "keypress", "input" ] : b.settings.emitEvents, 
            b.api.view = function() {
                o();
            }, b.api.edit = function() {
                p();
            }, b.api.setInvalid = function(a) {
                b.api._data.valid = !1, b.api._data.error = angular.isString(a) ? a : void 0, r();
            }, b.api.setValid = function() {
                b.api._data.valid = !0, r();
            }, b.api.setValue = function(a) {
                b.api._data.value = a;
            }, b.api.getValue = function() {
                return d.val();
            }, b.api.setLabel = function(a) {
                b.api._data.label = a;
            }, b.api.getLabel = function() {
                return b.api._data.label;
            }, b.api.setPlaceholder = function(a) {
                b.api._data.placeholder = a;
            }, b.api.getPlaceholder = function() {
                return b.api._data.placeholder;
            }, b.api.disable = function() {
                b.api._data.disabled = !0, d.attr("disabled", !0);
            }, b.api.enable = function() {
                b.api._data.disabled = !1, d.removeAttr("disabled");
            };
            var n = function() {
                //elementTextarea[0].rows = scope.api._data.rows;
                // emit events
                return d = angular.element(j), d.attr("type", b.api._data.type), d.val(b.api._data.value), 
                b.api._data.disabled && d.attr("disabled", !0), angular.isUndefined(b.api._data.rows) || d.attr("rows", b.api._data.rows), 
                angular.isUndefined(b.api._data.cols) || d.attr("cols", b.api._data.cols), angular.isString(b.api._data.value) && "" != b.api._data.value ? d.removeClass(h) : d.addClass(h), 
                angular.forEach(b.api._data.emitEvents, function(a) {
                    d.bind(a, function(c) {
                        b.$emit(b.settings.name + "-" + a, c);
                    });
                }), a(d)(b);
            };
            b.$watch("api._data.value", function() {
                q();
            });
            var o = function() {
                b.api._data.editable = !1, c.children().remove(), angular.isString(b.api._data.label) && (f = a(angular.element(l))(b), 
                c.append(f)), g = a(angular.element(m))(b), c.append(g);
            }, p = function() {
                b.api._data.editable = !0, c.children().remove(), c.append(n()), r(), q();
            }, q = function() {
                angular.isUndefined(d) || (!angular.isUndefined(b.api._data.value) && b.api._data.value.length > 0 ? d.removeClass(h) : d.addClass(h));
            }, r = function() {
                angular.isUndefined(e) || e.remove(), b.api._data.editable && (b.api._data.valid ? d.removeClass(i) : (d.addClass(i), 
                angular.isString(b.api._data.error) && (e = a(angular.element(k))(b), c.append(e))));
            };
            // INIT
            angular.isUndefined(b.settings.view) || 1 != b.settings.view ? p() : o();
        }
    };
} ]);
//# sourceMappingURL=gltextarea.min.js.map