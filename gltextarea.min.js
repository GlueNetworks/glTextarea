/*! 
  glTextarea v(0.0.10) 
  (c) 2013-2015
  https://gluenetworks.kilnhg.com/Code/Web-Development
  Release Date: 2015-03-12 
*/

angular.module("glTextarea", [ "glSuperScroll" ]), angular.module("glTextarea").directive("glTextarea", [ "$compile", function(a) {
    "use strict";
    return {
        restrict: "E",
        scope: {
            settings: "=",
            api: "="
        },
        link: function(b, c) {
            var d, e, f, g, h, i = "gl-empty", j = "gl-invalid", k = "gl-focus", l = "gl-disabled", m = '<div class="gl-textarea-container"></div>', n = '<textarea class="gl-textarea-input" data-gl-super-scroll data-ng-attr-placeholder="{{api._data.placeholder}}" data-ng-model="api._data.value"></textarea>', o = '<p class="gl-textarea-error">{{api._data.error}}</p>', p = '<label class="gl-textarea-view-label">{{api._data.label}}</label>', q = '<p class="gl-textarea-view-value">{{api._data.value}}</p>';
            d = angular.element(m), b.api = angular.isUndefined(b.api) ? {} : b.api, b.settings = angular.isUndefined(b.settings) ? {} : b.settings, 
            b.api._data = {}, // MAP SETTINGS
            b.api._data.value = angular.isUndefined(b.settings.value) ? void 0 : b.settings.value, 
            b.api._data.cols = angular.isUndefined(b.settings.cols) ? void 0 : b.settings.cols, 
            b.api._data.rows = angular.isUndefined(b.settings.rows) ? void 0 : b.settings.rows, 
            b.api._data.valid = angular.isUndefined(b.settings.valid) ? !0 : b.settings.valid, 
            b.api._data.name = angular.isUndefined(b.settings.name) ? void 0 : b.settings.name, 
            b.api._data.label = angular.isUndefined(b.settings.label) ? void 0 : b.settings.label, 
            b.api._data.disabled = angular.isUndefined(b.settings.disabled) ? !1 : b.settings.disabled, 
            b.api._data.placeholder = angular.isUndefined(b.settings.placeholder) ? void 0 : b.settings.placeholder, 
            b.api._data.error = angular.isUndefined(b.settings.error) ? void 0 : b.settings.error, 
            b.api._data.editable = angular.isUndefined(b.settings.editable) ? !0 : b.settings.editable, 
            b.api._data.onKeyDown = angular.isFunction(b.settings.onKeyDown) ? b.settings.onKeyDown : void 0, 
            b.api._data.onKeyPress = angular.isFunction(b.settings.onKeyPress) ? b.settings.onKeyPress : void 0, 
            b.api._data.onKeyUp = angular.isFunction(b.settings.onKeyUp) ? b.settings.onKeyUp : void 0, 
            b.api._data.onInput = angular.isFunction(b.settings.onInput) ? b.settings.onInput : void 0, 
            b.api._data.onFocus = angular.isFunction(b.settings.onFocus) ? b.settings.onFocus : void 0, 
            b.api._data.onBlur = angular.isFunction(b.settings.onBlur) ? b.settings.onBlur : void 0, 
            b.api._data.onMouseOver = angular.isFunction(b.settings.onMouseOver) ? b.settings.onMouseOver : void 0, 
            b.api._data.onMouseOut = angular.isFunction(b.settings.onMouseOut) ? b.settings.onMouseOut : void 0, 
            b.api._data.onMouseMove = angular.isFunction(b.settings.onMouseMove) ? b.settings.onMouseMove : void 0, 
            b.api._data.onMouseDown = angular.isFunction(b.settings.onMouseDown) ? b.settings.onMouseDown : void 0, 
            b.api._data.onMouseUp = angular.isFunction(b.settings.onMouseUp) ? b.settings.onMouseUp : void 0, 
            b.api.view = function() {
                s();
            }, b.api.edit = function() {
                t();
            }, b.api.setInvalid = function(a) {
                b.api._data.valid = !1, b.api._data.error = angular.isString(a) ? a : void 0, v();
            }, b.api.setValid = function() {
                b.api._data.valid = !0, v();
            }, b.api.setValue = function(a) {
                b.api._data.value = a;
            }, b.api.getValue = function() {
                return e.val();
            }, b.api.setLabel = function(a) {
                b.api._data.label = a;
            }, b.api.getLabel = function() {
                return b.api._data.label;
            }, b.api.setPlaceholder = function(a) {
                b.api._data.placeholder = a;
            }, b.api.getPlaceholder = function() {
                return b.api._data.placeholder;
            }, b.api.disable = function() {
                b.api._data.disabled = !0, e.attr("disabled", !0), d.addClass(l);
            }, b.api.enable = function() {
                b.api._data.disabled = !1, e.removeAttr("disabled"), d.removeClass(l);
            };
            var r = function() {
                //elementTextarea[0].rows = scope.api._data.rows;
                // event bindings
                return e = angular.element(n), e.attr("type", b.api._data.type), e.val(b.api._data.value), 
                b.api._data.disabled && (e.attr("disabled", !0), d.addClass(l)), angular.isUndefined(b.api._data.rows) || e.attr("rows", b.api._data.rows), 
                angular.isUndefined(b.api._data.cols) || e.attr("cols", b.api._data.cols), angular.isString(b.api._data.value) && "" != b.api._data.value ? e.removeClass(i) : e.addClass(i), 
                angular.isUndefined(b.api._data.onKeyDown) || e.bind("keydown", function(a) {
                    b.api._data.onKeyDown(a);
                }), angular.isUndefined(b.api._data.onKeyUp) || e.bind("keyup", function(a) {
                    b.api._data.onKeyUp(a);
                }), angular.isUndefined(b.api._data.onKeyPress) || e.bind("keypress", function(a) {
                    b.api._data.onKeyPress(a);
                }), angular.isUndefined(b.api._data.onInput) || e.bind("input", function(a) {
                    b.api._data.onInput(a);
                }), angular.isUndefined(b.api._data.onMouseOver) || e.bind("mouseover", function(a) {
                    b.api._data.onMouseOver(a);
                }), angular.isUndefined(b.api._data.onMouseOut) || e.bind("mouseout", function(a) {
                    b.api._data.onMouseOut(a);
                }), angular.isUndefined(b.api._data.onMouseMove) || e.bind("mousemove", function(a) {
                    b.api._data.onMouseMove(a);
                }), angular.isUndefined(b.api._data.onMouseDown) || e.bind("mousedown", function(a) {
                    b.api._data.onMouseDown(a);
                }), angular.isUndefined(b.api._data.onMouseUp) || e.bind("mouseup", function(a) {
                    b.api._data.onMouseUp(a);
                }), e.bind("focus", function() {
                    d.addClass(k);
                }), e.bind("blur", function() {
                    d.removeClass(k);
                }), e;
            };
            b.$watch("api._data.value", function() {
                u();
            });
            var s = function() {
                b.api._data.editable = !1, c.children().remove(), angular.isString(b.api._data.label) && (g = a(angular.element(p))(b), 
                c.append(g)), h = a(angular.element(q))(b), c.append(h);
            }, t = function() {
                d = angular.element(m), b.api._data.editable = !0, c.children().remove(), d.append(r()), 
                c.append(a(d)(b)), v(), u();
            }, u = function() {
                angular.isUndefined(e) || (!angular.isUndefined(b.api._data.value) && b.api._data.value.length > 0 ? (e.removeClass(i), 
                d.removeClass(i)) : (e.addClass(i), d.addClass(i)));
            }, v = function() {
                angular.isUndefined(f) || f.remove(), b.api._data.editable && (b.api._data.valid ? (e.removeClass(j), 
                d.removeClass(j)) : (e.addClass(j), d.addClass(j), angular.isString(b.api._data.error) && (f = angular.element(o), 
                c.append(a(f)(b)))));
            };
            // INIT
            angular.isUndefined(b.settings.view) || 1 != b.settings.view ? t() : s();
        }
    };
} ]);
//# sourceMappingURL=gltextarea.min.js.map