/*! 
  glsuperscroll v(1.1.2) 
  (c) 2013-2014
  https://gluenetworks.kilnhg.com/Code/Web-Development
  Release Date: 2014-09-05 
*/

angular.module("glSuperScroll", []), /**
 * @ngdoc controller
 * @name glSuperScroll.glSuperScrollController
 * @description
 *
 * The glSuperScroll attribute-level directive can be added to any element that the developer
 * would like to have a scrollbar experience similar to that on the Mac.  The controller
 * provides init logic and event handling.
 */
angular.module("glSuperScroll").controller("glSuperScrollController", function($scope) {
    "use strict";
    $scope.glSuperScroll = {
        // Scope vars for scrollbar-specific div instances
        box: void 0,
        inner: void 0,
        wrap: void 0,
        verticalScrollbar: void 0,
        // Logic to build the scrollbars for each element using glSuperScroll
        scrollbarInit: function() {
            // Apply the antiscroll logic to the wrapping element (new parent)
            $scope.glSuperScroll.box.antiscroll();
        }
    };
}), /**
 * @ngdoc directive
 * @name glSuperScroll.directive:glSuperScroll
 * @restrict A
 *
 * @description
 * The glSuperScroll attribute-level directive can be added to any element that the developer
 * would like to have a scrollbar experience similar to that on the Mac.  The directive grabs
 * the DOM element and creates the scope variables from that.
 */
angular.module("glSuperScroll").directive("glSuperScroll", function($compile) {
    "use strict";
    return {
        restrict: "A",
        scope: {
            settings: "@"
        },
        controller: "glSuperScrollController",
        link: function(scope, element) {
            /********** START - EVENT HANDLERS **********/
            // Check for the existence of the vertical scrollbar
            function scrollbarExistenceCheck() {
                // If the scrollbar exists, kill all temporary handlers
                scope.glSuperScroll.box.find(".antiscroll-scrollbar-vertical").length > 0 ? (// Capture the vertical scrollbar
                scope.glSuperScroll.verticalScrollbar = scope.glSuperScroll.inner.parent().find(".antiscroll-scrollbar-vertical"), 
                // Unbind event handlers
                unbindEventHandlers(), // Add event handler to the inner element to hide the scrollbar if it is larger
                // than the scrollable area
                initElementHandler(), // Set the height/width of the scrolling element back to its original height/width
                scope.glSuperScroll.inner.height(innerHeight), scope.glSuperScroll.inner.width(innerWidth)) : scope.glSuperScroll.scrollbarInit();
            }
            /********** END - EVENT HANDLERS **********/
            /********** START - EVENT HANDLERS **********/
            // Init the temporary handlers used to catch triggering events to build the scrollbars
            function initEventHandlers() {
                // Check for the existence of the vertical scrollbar
                scrollbarExistenceCheck(), // Watch statement for window resize event
                $(window).on("resize", windowResizeHandler), // Binding to catch the mouseenter event for the wrapping element
                $(scope.glSuperScroll.wrap).on("mouseenter", wrapperMouseEnterHandler), // Bind to the scroll event for the scrolling element
                $(scope.glSuperScroll.inner).on("scroll", scrollingElementScrollHandler);
            }
            // Handler to hide the vertical scrollbar if it is larger than the scrollable content
            function initElementHandler() {
                // Binding to catch the mouseenter event for the inner element
                scope.glSuperScroll.inner.on("mouseenter", function() {
                    // If the scroll height of the element is greater than its actual height,
                    // show the scrollbars
                    scope.glSuperScroll.inner[0].scrollHeight > scope.glSuperScroll.inner[0].clientHeight ? scope.glSuperScroll.verticalScrollbar.css("display", "block") : scope.glSuperScroll.verticalScrollbar.css("display", "none");
                });
            }
            // Unbind any event handlers that were needed prior to glSuperScroll being in place
            function unbindEventHandlers() {
                // Unbind the window resize event
                $(window).off("resize", windowResizeHandler), // Unbind the mouseenter event for the wrapping element
                $(scope.glSuperScroll.wrap).off("mouseenter", wrapperMouseEnterHandler), // Unbind the scroll event for the scrolling element
                $(scope.glSuperScroll.inner).off("scroll", scrollingElementScrollHandler);
            }
            // Handler function for the window 'resize' event that is specific to glSuperScroll
            function windowResizeHandler() {
                // Check for the existence of the vertical scrollbar
                scrollbarExistenceCheck(), // Capture the height and width of the scrolling element in case it has changed
                innerHeight = scope.glSuperScroll.inner.height(), innerWidth = scope.glSuperScroll.inner.width();
            }
            // Handler function for the wrapping div 'mouseenter' event that is specific to
            // glSuperScroll
            function wrapperMouseEnterHandler() {
                // Check for the existence of the vertical scrollbar
                scrollbarExistenceCheck();
            }
            // Handler function for the scrolling elements 'scroll' event that is specific to
            // glSuperScroll
            function scrollingElementScrollHandler() {
                // Check for the existence of the vertical scrollbar
                scrollbarExistenceCheck();
            }
            // Variables used to store the height and width of the element receiving
            // the scrollbars
            var innerHeight, innerWidth;
            /********** END - EVENT HANDLERS **********/
            /********** START - INIT **********/
            // If the OS of the client is NOT a Mac OS, create the scrollbars
            if (-1 === navigator.platform.toLowerCase().indexOf("mac")) {
                // Grab the current element and create a wrapping element
                var scrollerElement = angular.element(element), wrappingElement = $compile('<div class="antiscroll-wrap"><div class="antiscroll-box"></div></div>')(scope);
                // Add the inner class to element receiving the awesome scroll bars
                scrollerElement.addClass("antiscroll-inner"), // Wrap the element with the div that will hold the scrollbars
                scrollerElement.wrap(wrappingElement), // Assign variables
                scope.glSuperScroll.inner = scrollerElement, innerHeight = scope.glSuperScroll.inner.height(), 
                innerWidth = scope.glSuperScroll.inner.width(), scope.glSuperScroll.box = scrollerElement.parent(), 
                scope.glSuperScroll.wrap = scope.glSuperScroll.box.parent(), // Init the scrollbars
                scope.glSuperScroll.scrollbarInit(), // Init scrollbar handlers
                initEventHandlers();
            }
        }
    };
});
//# sourceMappingURL=glsuperscroll.min.map